require 'rubygems'
require 'pp'
require 'ostruct'

IRB.conf[:SAVE_HISTORY] = 10_000

# List methods of an object and optionally filter by pattern
def show_methods(o, pattern=//, options={})
  options = { :include_super => true, :kind => :methods }.merge(options)
  o.send(options[:kind], options[:include_super]).select do |method|
    method.to_s =~ pattern
  end
end
alias :m :show_methods

# Print formatted column names and type info for ActiveRecord models
def fields(model)
  puts "Columns for '#{model.table_name}'"
  width = model.columns.inject(0) { |max_width, col| col.name.size > max_width ? col.name.size : max_width }
  _columns = model.columns.collect do |c|
    "  %-#{width + 2}s :%s" % [c.name, c.type]
  end.join("\n")
  puts _columns
end
alias :c :fields

def print_with_map(collection)
  if block_given?
    puts collection.map(&Proc.new).join("\n")
  else
    puts collection.map(&:to_s).join("\n")
  end
end
alias :pm :print_with_map

class Object
  def imethods
    methods.reject { |m| m.to_s.end_with?('=') } - self.class.instance_methods
  end
end

def pp_that_returns_nil(o)
  default_pp(o)
  nil
end

alias :default_pp :pp
alias :pp :pp_that_returns_nil
